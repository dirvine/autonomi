{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Autonomi Documentation","text":"<p>Welcome to the Autonomi documentation! This guide will help you get started with using the Autonomi network client.</p>"},{"location":"#what-is-autonomi","title":"What is Autonomi?","text":"<p>Autonomi is a decentralized network client that provides:</p> <ul> <li>Distributed data storage and retrieval</li> <li>EVM network integration</li> <li>Secure pointer management</li> <li>Linked list data structures</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation Guide</li> <li>Quick Start Guide</li> <li>API Reference</li> <li>Local Network Setup</li> </ul>"},{"location":"#language-support","title":"Language Support","text":"<p>Autonomi provides client libraries for multiple languages:</p> Node.jsPythonRust <pre><code>import { Client } from '@autonomi/client';\n\nconst client = new Client();\nawait client.connect();\n</code></pre> <pre><code>from autonomi import Client\n\nclient = Client()\nawait client.connect()\n</code></pre> <pre><code>use autonomi::Client;\n\nlet client = Client::new()?;\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Here's how you can help:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Submit a pull request</li> </ol> <p>For more details, see our Contributing Guide.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues</li> <li>API Reference</li> <li>Testing Guide</li> </ul>"},{"location":"pointer_design_doc/","title":"Pointer Data Type Design Document","text":""},{"location":"pointer_design_doc/#overview","title":"Overview","text":"<p>The <code>Pointer</code> data type is designed to represent a reference to a <code>LinkedList</code> in the system. It will include metadata such as the owner, a counter, and a signature to ensure data integrity and authenticity.</p>"},{"location":"pointer_design_doc/#structure","title":"Structure","text":"<pre><code>struct Pointer {\n    owner: PubKey, // This is the address of this data type\n    counter: U32,\n    target: PointerTarget, // Can be PointerAddress, LinkedListAddress, ChunksAddress, or ScratchpadAddress\n    signature: Sig, // Signature of counter and pointer (and target)\n}\n</code></pre>"},{"location":"pointer_design_doc/#pointer-target","title":"Pointer Target","text":"<p>The <code>PointerTarget</code> enum will define the possible target types for a <code>Pointer</code>:</p> <pre><code>enum PointerTarget {\n    PointerAddress(PointerAddress),\n    LinkedListAddress(LinkedListAddress),\n    ChunkAddress(ChunkAddress),\n    ScratchpadAddress(ScratchpadAddress),\n}\n</code></pre>"},{"location":"pointer_design_doc/#detailed-implementation-and-testing-strategy","title":"Detailed Implementation and Testing Strategy","text":"<ol> <li>Define the <code>Pointer</code> Struct:</li> <li>Implement the <code>Pointer</code> struct in a new Rust file alongside <code>linked_list.rs</code>.</li> <li> <p>Testing: Write unit tests to ensure the struct is correctly defined and can be instantiated.</p> </li> <li> <p>Address Handling:</p> </li> <li>Implement address handling similar to <code>LinkedListAddress</code>.</li> <li> <p>Testing: Verify address conversion and serialization through unit tests.</p> </li> <li> <p>Integration with <code>record_store.rs</code>:</p> </li> <li>Ensure that the <code>Pointer</code> type is properly integrated into the <code>record_store.rs</code> to handle storage and retrieval operations.</li> <li> <p>Testing: Use integration tests to confirm that <code>Pointer</code> records can be stored and retrieved correctly.</p> </li> <li> <p>Signature Verification:</p> </li> <li>Implement methods to sign and verify the <code>Pointer</code> data using the owner's private key.</li> <li> <p>Testing: Write tests to validate the signature creation and verification process.</p> </li> <li> <p>Output Handling:</p> </li> <li>The <code>Pointer</code> will point to a <code>LinkedList</code>, and the <code>LinkedList</code> output will be used as the value. If there is more than one output, the return will be a vector of possible values.</li> <li> <p>Testing: Test the output handling logic to ensure it returns the correct values.</p> </li> <li> <p>Integration with ant-networking:</p> </li> <li>Implement methods to serialize and deserialize <code>Pointer</code> records, similar to how <code>LinkedList</code> records are handled.</li> <li>Ensure that the <code>Pointer</code> type is supported in the <code>NodeRecordStore</code> for storage and retrieval operations.</li> <li> <p>Testing: Conduct end-to-end tests to verify the integration with <code>ant-networking</code>.</p> </li> <li> <p>Payment Handling:</p> </li> <li>Introduce <code>RecordKind::PointerWithPayment</code> to handle <code>Pointer</code> records with payments.</li> <li>Implement logic to process <code>Pointer</code> records with payments, similar to <code>LinkedListWithPayment</code>.</li> <li> <p>Testing: Test the payment processing logic to ensure it handles payments correctly.</p> </li> <li> <p>Documentation and Review:</p> </li> <li>Update documentation to reflect the new <code>Pointer</code> type and its usage.</li> <li>Conduct code reviews to ensure quality and adherence to best practices.</li> </ol>"},{"location":"pointer_design_doc/#next-steps","title":"Next Steps","text":"<ul> <li>Develop a detailed implementation plan for each component.</li> <li>Identify any additional dependencies or libraries required.</li> <li>Plan for testing and validation of the <code>Pointer</code> data type.</li> </ul>"},{"location":"pointer_design_doc/#conclusion","title":"Conclusion","text":"<p>The <code>Pointer</code> data type will enhance the system's ability to reference and manage <code>LinkedList</code> structures efficiently. Further details will be added as the implementation progresses.</p>"},{"location":"api/nodejs/","title":"Node.js API Reference","text":""},{"location":"api/nodejs/#installation","title":"Installation","text":"<pre><code>npm install @autonomi/client\n</code></pre>"},{"location":"api/nodejs/#core-classes","title":"Core Classes","text":""},{"location":"api/nodejs/#client","title":"Client","text":"<p>The main interface for interacting with the Autonomi network.</p> <pre><code>class Client {\n  constructor(config?: ClientConfig);\n\n  // Linked List Operations\n  async linkedListPut(list: LinkedList): Promise&lt;LinkedListAddress&gt;;\n  async linkedListGet(address: LinkedListAddress): Promise&lt;LinkedList&gt;;\n\n  // Pointer Operations\n  async pointerPut(pointer: Pointer): Promise&lt;PointerAddress&gt;;\n  async pointerGet(address: PointerAddress): Promise&lt;Pointer&gt;;\n\n  // Network Operations\n  async connect(): Promise&lt;void&gt;;\n  async disconnect(): Promise&lt;void&gt;;\n}\n</code></pre>"},{"location":"api/nodejs/#linkedlist","title":"LinkedList","text":"<p>Represents a linked list data structure.</p> <pre><code>class LinkedList {\n  constructor();\n\n  append(data: any): void;\n  prepend(data: any): void;\n  remove(index: number): void;\n  get(index: number): any;\n  toString(): string;\n}\n</code></pre>"},{"location":"api/nodejs/#pointer","title":"Pointer","text":"<p>Represents a pointer in the network.</p> <pre><code>class Pointer {\n  constructor();\n\n  setTarget(target: string): void;\n  getTarget(): string;\n  isValid(): boolean;\n}\n</code></pre>"},{"location":"api/nodejs/#types","title":"Types","text":"<pre><code>interface ClientConfig {\n  networkUrl?: string;\n  timeout?: number;\n  retries?: number;\n}\n\ntype LinkedListAddress = string;\ntype PointerAddress = string;\n</code></pre>"},{"location":"api/nodejs/#error-handling","title":"Error Handling","text":"<pre><code>class AutonomiError extends Error {\n  constructor(message: string, code: string);\n\n  readonly code: string;\n  readonly message: string;\n}\n</code></pre>"},{"location":"api/nodejs/#examples","title":"Examples","text":""},{"location":"api/nodejs/#basic-usage","title":"Basic Usage","text":"<pre><code>import { Client, LinkedList } from '@autonomi/client';\n\nasync function example() {\n  const client = new Client();\n\n  // Create and store a linked list\n  const list = new LinkedList();\n  list.append(\"Hello\");\n  list.append(\"World\");\n\n  const address = await client.linkedListPut(list);\n  console.log(`List stored at: ${address}`);\n\n  // Retrieve the list\n  const retrieved = await client.linkedListGet(address);\n  console.log(retrieved.toString()); // \"Hello World\"\n}\n</code></pre>"},{"location":"api/nodejs/#error-handling_1","title":"Error Handling","text":"<pre><code>try {\n  const client = new Client();\n  await client.connect();\n} catch (error) {\n  if (error instanceof AutonomiError) {\n    console.error(`Error code: ${error.code}`);\n    console.error(`Message: ${error.message}`);\n  }\n}\n</code></pre>"},{"location":"api/nodejs/#best-practices","title":"Best Practices","text":"<ol> <li>Always use TypeScript for better type safety</li> <li>Handle errors appropriately</li> <li>Use async/await for all asynchronous operations</li> <li>Properly dispose of resources</li> <li>Follow the provided examples for memory management</li> </ol>"},{"location":"api/python/","title":"Python API Reference","text":""},{"location":"api/python/#installation","title":"Installation","text":"<pre><code>pip install autonomi-client\n</code></pre>"},{"location":"api/python/#core-classes","title":"Core Classes","text":""},{"location":"api/python/#client","title":"Client","text":"<p>The main interface for interacting with the Autonomi network.</p> <pre><code>from typing import Optional, Dict, Any\nfrom autonomi import LinkedList, Pointer, LinkedListAddress, PointerAddress\n\nclass Client:\n    def __init__(self, config: Optional[Dict[str, Any]] = None) -&gt; None:\n        \"\"\"Initialize a new Autonomi client.\n\n        Args:\n            config: Optional configuration dictionary\n        \"\"\"\n        pass\n\n    async def linked_list_put(self, list_obj: LinkedList) -&gt; LinkedListAddress:\n        \"\"\"Store a linked list in the network.\n\n        Args:\n            list_obj: The linked list to store\n\n        Returns:\n            The address where the list is stored\n        \"\"\"\n        pass\n\n    async def linked_list_get(self, address: LinkedListAddress) -&gt; LinkedList:\n        \"\"\"Retrieve a linked list from the network.\n\n        Args:\n            address: The address of the list to retrieve\n\n        Returns:\n            The retrieved linked list\n        \"\"\"\n        pass\n\n    async def pointer_put(self, pointer: Pointer) -&gt; PointerAddress:\n        \"\"\"Store a pointer in the network.\n\n        Args:\n            pointer: The pointer to store\n\n        Returns:\n            The address where the pointer is stored\n        \"\"\"\n        pass\n\n    async def pointer_get(self, address: PointerAddress) -&gt; Pointer:\n        \"\"\"Retrieve a pointer from the network.\n\n        Args:\n            address: The address of the pointer to retrieve\n\n        Returns:\n            The retrieved pointer\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/python/#linkedlist","title":"LinkedList","text":"<p>Represents a linked list data structure.</p> <pre><code>from typing import Any\n\nclass LinkedList:\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize a new linked list.\"\"\"\n        pass\n\n    def append(self, data: Any) -&gt; None:\n        \"\"\"Append data to the list.\n\n        Args:\n            data: The data to append\n        \"\"\"\n        pass\n\n    def prepend(self, data: Any) -&gt; None:\n        \"\"\"Prepend data to the list.\n\n        Args:\n            data: The data to prepend\n        \"\"\"\n        pass\n\n    def remove(self, index: int) -&gt; None:\n        \"\"\"Remove an item at the specified index.\n\n        Args:\n            index: The index to remove\n        \"\"\"\n        pass\n\n    def get(self, index: int) -&gt; Any:\n        \"\"\"Get an item at the specified index.\n\n        Args:\n            index: The index to retrieve\n\n        Returns:\n            The item at the specified index\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/python/#pointer","title":"Pointer","text":"<p>Represents a pointer in the network.</p> <pre><code>class Pointer:\n    def __init__(self) -&gt; None:\n        \"\"\"Initialize a new pointer.\"\"\"\n        pass\n\n    def set_target(self, target: str) -&gt; None:\n        \"\"\"Set the target of the pointer.\n\n        Args:\n            target: The target to set\n        \"\"\"\n        pass\n\n    def get_target(self) -&gt; str:\n        \"\"\"Get the target of the pointer.\n\n        Returns:\n            The current target\n        \"\"\"\n        pass\n\n    def is_valid(self) -&gt; bool:\n        \"\"\"Check if the pointer is valid.\n\n        Returns:\n            True if valid, False otherwise\n        \"\"\"\n        pass\n</code></pre>"},{"location":"api/python/#examples","title":"Examples","text":""},{"location":"api/python/#basic-usage","title":"Basic Usage","text":"<pre><code>import asyncio\nfrom autonomi import Client, LinkedList\n\nasync def example():\n    client = Client()\n\n    # Create and store a linked list\n    list_obj = LinkedList()\n    list_obj.append(\"Hello\")\n    list_obj.append(\"World\")\n\n    address = await client.linked_list_put(list_obj)\n    print(f\"List stored at: {address}\")\n\n    # Retrieve the list\n    retrieved = await client.linked_list_get(address)\n    print(str(retrieved))  # \"Hello World\"\n\n# Run the example\nasyncio.run(example())\n</code></pre>"},{"location":"api/python/#error-handling","title":"Error Handling","text":"<pre><code>from autonomi import Client, AutonomiError\n\nasync def example():\n    try:\n        client = Client()\n        await client.connect()\n    except AutonomiError as e:\n        print(f\"Error code: {e.code}\")\n        print(f\"Message: {e.message}\")\n</code></pre>"},{"location":"api/python/#best-practices","title":"Best Practices","text":"<ol> <li>Use type hints for better code quality</li> <li>Handle errors appropriately using try/except</li> <li>Use async/await for all asynchronous operations</li> <li>Follow the provided examples for proper resource management</li> <li>Use context managers when appropriate</li> </ol>"},{"location":"api/rust/","title":"Rust API Reference","text":""},{"location":"api/rust/#installation","title":"Installation","text":"<p>Add to your <code>Cargo.toml</code>:</p> <pre><code>[dependencies]\nautonomi = \"0.1.0\"\n</code></pre>"},{"location":"api/rust/#core-types","title":"Core Types","text":""},{"location":"api/rust/#client","title":"Client","text":"<p>The main interface for interacting with the Autonomi network.</p> <pre><code>use autonomi::{Client, LinkedList, Pointer, Result};\n\npub struct Client {\n    // ... implementation details ...\n}\n\nimpl Client {\n    /// Create a new client with default configuration\n    pub fn new() -&gt; Result&lt;Self&gt;;\n\n    /// Create a new client with custom configuration\n    pub fn with_config(config: ClientConfig) -&gt; Result&lt;Self&gt;;\n\n    /// Store a linked list in the network\n    pub fn linked_list_put(&amp;self, list: &amp;LinkedList) -&gt; Result&lt;LinkedListAddress&gt;;\n\n    /// Retrieve a linked list from the network\n    pub fn linked_list_get(&amp;self, address: &amp;LinkedListAddress) -&gt; Result&lt;LinkedList&gt;;\n\n    /// Store a pointer in the network\n    pub fn pointer_put(&amp;self, pointer: &amp;Pointer) -&gt; Result&lt;PointerAddress&gt;;\n\n    /// Retrieve a pointer from the network\n    pub fn pointer_get(&amp;self, address: &amp;PointerAddress) -&gt; Result&lt;Pointer&gt;;\n}\n</code></pre>"},{"location":"api/rust/#linkedlist","title":"LinkedList","text":"<p>Represents a linked list data structure.</p> <pre><code>pub struct LinkedList {\n    // ... implementation details ...\n}\n\nimpl LinkedList {\n    /// Create a new empty linked list\n    pub fn new() -&gt; Self;\n\n    /// Append data to the list\n    pub fn append&lt;T: Into&lt;Vec&lt;u8&gt;&gt;&gt;(&amp;mut self, data: T);\n\n    /// Prepend data to the list\n    pub fn prepend&lt;T: Into&lt;Vec&lt;u8&gt;&gt;&gt;(&amp;mut self, data: T);\n\n    /// Remove an item at the specified index\n    pub fn remove(&amp;mut self, index: usize) -&gt; Result&lt;()&gt;;\n\n    /// Get an item at the specified index\n    pub fn get(&amp;self, index: usize) -&gt; Option&lt;&amp;[u8]&gt;;\n}\n</code></pre>"},{"location":"api/rust/#pointer","title":"Pointer","text":"<p>Represents a pointer in the network.</p> <pre><code>pub struct Pointer {\n    // ... implementation details ...\n}\n\nimpl Pointer {\n    /// Create a new pointer\n    pub fn new() -&gt; Self;\n\n    /// Set the target of the pointer\n    pub fn set_target&lt;T: Into&lt;String&gt;&gt;(&amp;mut self, target: T);\n\n    /// Get the target of the pointer\n    pub fn target(&amp;self) -&gt; &amp;str;\n\n    /// Check if the pointer is valid\n    pub fn is_valid(&amp;self) -&gt; bool;\n}\n</code></pre>"},{"location":"api/rust/#error-handling","title":"Error Handling","text":"<pre><code>pub type Result&lt;T&gt; = std::result::Result&lt;T, Error&gt;;\n\n#[derive(Debug)]\npub enum Error {\n    /// Network-related errors\n    Network(String),\n    /// Storage-related errors\n    Storage(String),\n    /// Invalid data format\n    InvalidData(String),\n    /// Other errors\n    Other(String),\n}\n\nimpl std::error::Error for Error {}\n</code></pre>"},{"location":"api/rust/#examples","title":"Examples","text":""},{"location":"api/rust/#basic-usage","title":"Basic Usage","text":"<pre><code>use autonomi::{Client, LinkedList, Result};\n\nfn main() -&gt; Result&lt;()&gt; {\n    // Create a new client\n    let client = Client::new()?;\n\n    // Create and store a linked list\n    let mut list = LinkedList::new();\n    list.append(\"Hello\");\n    list.append(\"World\");\n\n    let address = client.linked_list_put(&amp;list)?;\n    println!(\"List stored at: {}\", address);\n\n    // Retrieve the list\n    let retrieved = client.linked_list_get(&amp;address)?;\n    println!(\"{}\", retrieved);\n\n    Ok(())\n}\n</code></pre>"},{"location":"api/rust/#error-handling_1","title":"Error Handling","text":"<pre><code>use autonomi::{Client, Error};\n\nfn main() {\n    match Client::new() {\n        Ok(client) =&gt; {\n            // Use the client\n            println!(\"Client created successfully\");\n        }\n        Err(Error::Network(msg)) =&gt; {\n            eprintln!(\"Network error: {}\", msg);\n        }\n        Err(Error::Storage(msg)) =&gt; {\n            eprintln!(\"Storage error: {}\", msg);\n        }\n        Err(e) =&gt; {\n            eprintln!(\"Other error: {}\", e);\n        }\n    }\n}\n</code></pre>"},{"location":"api/rust/#best-practices","title":"Best Practices","text":"<ol> <li>Use proper error handling with <code>Result</code> types</li> <li>Implement proper resource cleanup with <code>Drop</code> trait</li> <li>Use strong typing and avoid unwrap/expect</li> <li>Follow Rust's ownership and borrowing rules</li> <li>Use async/await for network operations when available</li> </ol>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install the Autonomi client for your preferred programming language.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Node.js 16+ (for Node.js client)</li> <li>Python 3.8+ (for Python client)</li> <li>Rust toolchain (for Rust client)</li> <li>Docker (for local network)</li> </ul>"},{"location":"getting-started/installation/#nodejs-installation","title":"Node.js Installation","text":"<pre><code># Using npm\nnpm install @autonomi/client\n\n# Using yarn\nyarn add @autonomi/client\n\n# Using pnpm\npnpm add @autonomi/client\n</code></pre>"},{"location":"getting-started/installation/#typescript-configuration","title":"TypeScript Configuration","text":"<p>Add these settings to your <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true\n  }\n}\n</code></pre>"},{"location":"getting-started/installation/#python-installation","title":"Python Installation","text":"<pre><code># Using pip\npip install autonomi-client\n\n# Using poetry\npoetry add autonomi-client\n</code></pre>"},{"location":"getting-started/installation/#virtual-environment-recommended","title":"Virtual Environment (recommended)","text":"<pre><code># Create virtual environment\npython -m venv venv\n\n# Activate virtual environment\nsource venv/bin/activate  # Unix\n.\\venv\\Scripts\\activate   # Windows\n\n# Install package\npip install autonomi-client\n</code></pre>"},{"location":"getting-started/installation/#rust-installation","title":"Rust Installation","text":"<p>Add to your <code>Cargo.toml</code>:</p> <pre><code>[dependencies]\nautonomi = \"0.1.0\"\n</code></pre> <p>Or using cargo-edit:</p> <pre><code>cargo add autonomi\n</code></pre>"},{"location":"getting-started/installation/#docker-setup-for-local-network","title":"Docker Setup (for Local Network)","text":"<ol> <li>Install Docker:</li> <li>Docker Desktop for Mac</li> <li>Docker Desktop for Windows</li> <li> <p>Docker Engine for Linux</p> </li> <li> <p>Pull the Autonomi image:</p> </li> </ol> <pre><code>docker pull autonomi/node:latest\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":""},{"location":"getting-started/installation/#nodejs","title":"Node.js","text":"<pre><code>import { Client } from '@autonomi/client';\n\nasync function verify() {\n    const client = new Client();\n    await client.connect();\n    console.log('Connected successfully!');\n}\n\nverify().catch(console.error);\n</code></pre>"},{"location":"getting-started/installation/#python","title":"Python","text":"<pre><code>import asyncio\nfrom autonomi import Client\n\nasync def verify():\n    client = Client()\n    await client.connect()\n    print('Connected successfully!')\n\nasyncio.run(verify())\n</code></pre>"},{"location":"getting-started/installation/#rust","title":"Rust","text":"<pre><code>use autonomi::Client;\n\nfn main() -&gt; Result&lt;(), Box&lt;dyn std::error::Error&gt;&gt; {\n    let client = Client::new()?;\n    println!(\"Connected successfully!\");\n    Ok(())\n}\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide</li> <li>Local Network Setup</li> <li>API Reference</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Autonomi quickly. We'll create a simple application that stores and retrieves data using linked lists.</p>"},{"location":"getting-started/quickstart/#choose-your-language","title":"Choose Your Language","text":"Node.jsPythonRust <pre><code>import { Client, LinkedList } from '@autonomi/client';\n\nasync function main() {\n    // Initialize client\n    const client = new Client();\n    await client.connect();\n\n    // Create a linked list\n    const list = new LinkedList();\n    list.append(\"Hello\");\n    list.append(\"World\");\n\n    // Store the list\n    const address = await client.linkedListPut(list);\n    console.log(`List stored at: ${address}`);\n\n    // Retrieve the list\n    const retrieved = await client.linkedListGet(address);\n    console.log(retrieved.toString()); // \"Hello World\"\n}\n\nmain().catch(console.error);\n</code></pre> <pre><code>import asyncio\nfrom autonomi import Client, LinkedList\n\nasync def main():\n    # Initialize client\n    client = Client()\n    await client.connect()\n\n    # Create a linked list\n    list_obj = LinkedList()\n    list_obj.append(\"Hello\")\n    list_obj.append(\"World\")\n\n    # Store the list\n    address = await client.linked_list_put(list_obj)\n    print(f\"List stored at: {address}\")\n\n    # Retrieve the list\n    retrieved = await client.linked_list_get(address)\n    print(str(retrieved))  # \"Hello World\"\n\nasyncio.run(main())\n</code></pre> <pre><code>use autonomi::{Client, LinkedList, Result};\n\nfn main() -&gt; Result&lt;()&gt; {\n    // Initialize client\n    let client = Client::new()?;\n\n    // Create a linked list\n    let mut list = LinkedList::new();\n    list.append(\"Hello\");\n    list.append(\"World\");\n\n    // Store the list\n    let address = client.linked_list_put(&amp;list)?;\n    println!(\"List stored at: {}\", address);\n\n    // Retrieve the list\n    let retrieved = client.linked_list_get(&amp;address)?;\n    println!(\"{}\", retrieved);\n\n    Ok(())\n}\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-pointers","title":"Working with Pointers","text":"<p>Pointers allow you to create references to data in the network:</p> Node.jsPythonRust <pre><code>import { Client, Pointer } from '@autonomi/client';\n\nasync function main() {\n    const client = new Client();\n    await client.connect();\n\n    // Create a pointer\n    const pointer = new Pointer();\n    pointer.setTarget(\"example-target\");\n\n    // Store the pointer\n    const address = await client.pointerPut(pointer);\n    console.log(`Pointer stored at: ${address}`);\n\n    // Retrieve the pointer\n    const retrieved = await client.pointerGet(address);\n    console.log(`Target: ${retrieved.getTarget()}`);\n}\n</code></pre> <pre><code>import asyncio\nfrom autonomi import Client, Pointer\n\nasync def main():\n    client = Client()\n    await client.connect()\n\n    # Create a pointer\n    pointer = Pointer()\n    pointer.set_target(\"example-target\")\n\n    # Store the pointer\n    address = await client.pointer_put(pointer)\n    print(f\"Pointer stored at: {address}\")\n\n    # Retrieve the pointer\n    retrieved = await client.pointer_get(address)\n    print(f\"Target: {retrieved.get_target()}\")\n\nasyncio.run(main())\n</code></pre> <pre><code>use autonomi::{Client, Pointer, Result};\n\nfn main() -&gt; Result&lt;()&gt; {\n    let client = Client::new()?;\n\n    // Create a pointer\n    let mut pointer = Pointer::new();\n    pointer.set_target(\"example-target\");\n\n    // Store the pointer\n    let address = client.pointer_put(&amp;pointer)?;\n    println!(\"Pointer stored at: {}\", address);\n\n    // Retrieve the pointer\n    let retrieved = client.pointer_get(&amp;address)?;\n    println!(\"Target: {}\", retrieved.target());\n\n    Ok(())\n}\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Local Network Setup</li> <li>EVM Integration</li> <li>Testing Guide</li> <li>API Reference</li> </ul>"},{"location":"guides/evm_integration/","title":"EVM Integration Guide","text":"<p>This guide explains how to integrate Autonomi with EVM-compatible networks for testing and development.</p>"},{"location":"guides/evm_integration/#supported-networks","title":"Supported Networks","text":"<ul> <li>Local Hardhat network</li> <li>Sepolia testnet</li> <li>Goerli testnet</li> <li>Custom EVM networks</li> </ul>"},{"location":"guides/evm_integration/#setting-up-test-networks","title":"Setting Up Test Networks","text":""},{"location":"guides/evm_integration/#local-hardhat-network","title":"Local Hardhat Network","text":"<pre><code>npx hardhat node\n</code></pre>"},{"location":"guides/evm_integration/#connecting-to-test-networks","title":"Connecting to Test Networks","text":"<pre><code>import { EvmNetwork } from '@autonomi/client';\n\nconst network = new EvmNetwork({\n  chainId: 31337, // Local hardhat network\n  rpcUrl: 'http://127.0.0.1:8545'\n});\n</code></pre>"},{"location":"guides/evm_integration/#deploying-test-contracts","title":"Deploying Test Contracts","text":"<ol> <li>Compile contracts</li> <li>Deploy using Hardhat</li> <li>Interact with contracts</li> </ol>"},{"location":"guides/evm_integration/#testing-with-different-networks","title":"Testing with Different Networks","text":"<ul> <li>Network configuration</li> <li>Gas settings</li> <li>Contract deployment</li> <li>Transaction handling</li> </ul>"},{"location":"guides/evm_integration/#best-practices","title":"Best Practices","text":"<ul> <li>Error handling</li> <li>Gas optimization</li> <li>Security considerations</li> <li>Testing strategies</li> </ul>"},{"location":"guides/local_network/","title":"Local Network Setup Guide","text":"<p>This guide explains how to set up and run a local Autonomi network for development and testing purposes.</p>"},{"location":"guides/local_network/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Node.js 16+</li> <li>Python 3.8+</li> <li>Rust toolchain</li> </ul>"},{"location":"guides/local_network/#quick-start","title":"Quick Start","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/dirvine/autonomi\ncd autonomi\n</code></pre> <ol> <li>Start the local network:</li> </ol> <pre><code>./scripts/start_local_network.sh\n</code></pre>"},{"location":"guides/local_network/#network-configuration","title":"Network Configuration","text":"<p>The local network consists of:</p> <ul> <li>Multiple Autonomi nodes</li> <li>Local EVM test network</li> <li>Test wallets and accounts</li> </ul>"},{"location":"guides/local_network/#testing-with-evm-networks","title":"Testing with EVM Networks","text":"<ol> <li>Configure test network settings</li> <li>Deploy test contracts</li> <li>Interact with the network</li> </ol>"},{"location":"guides/local_network/#monitoring-and-debugging","title":"Monitoring and Debugging","text":"<ul> <li>Network metrics</li> <li>Logging</li> <li>Debugging tools</li> </ul>"},{"location":"guides/local_network/#common-issues-and-solutions","title":"Common Issues and Solutions","text":"<ul> <li>Troubleshooting guide</li> <li>FAQ</li> </ul>"},{"location":"guides/testing_guide/","title":"Testing Guide","text":"<p>This guide covers testing strategies for Autonomi applications across different languages and environments.</p>"},{"location":"guides/testing_guide/#test-environment-setup","title":"Test Environment Setup","text":""},{"location":"guides/testing_guide/#nodejs","title":"Node.js","text":"<pre><code>npm install --save-dev jest @types/jest ts-jest\n</code></pre>"},{"location":"guides/testing_guide/#python","title":"Python","text":"<pre><code>pip install pytest pytest-asyncio\n</code></pre>"},{"location":"guides/testing_guide/#rust","title":"Rust","text":"<pre><code>cargo install cargo-test\n</code></pre>"},{"location":"guides/testing_guide/#writing-tests","title":"Writing Tests","text":""},{"location":"guides/testing_guide/#nodejs-example","title":"Node.js Example","text":"<pre><code>import { Client, LinkedList } from '@autonomi/client';\n\ndescribe('LinkedList Operations', () =&gt; {\n  let client: Client;\n\n  beforeEach(() =&gt; {\n    client = new Client();\n  });\n\n  test('should store and retrieve linked list', async () =&gt; {\n    const list = new LinkedList();\n    list.append(\"test data\");\n\n    const address = await client.linkedListPut(list);\n    const retrieved = await client.linkedListGet(address);\n\n    expect(retrieved.toString()).toBe(\"test data\");\n  });\n});\n</code></pre>"},{"location":"guides/testing_guide/#python-example","title":"Python Example","text":"<pre><code>import pytest\nfrom autonomi import Client, LinkedList\n\n@pytest.mark.asyncio\nasync def test_linked_list_operations():\n    client = Client()\n\n    # Create and store list\n    list_obj = LinkedList()\n    list_obj.append(\"test data\")\n\n    address = await client.linked_list_put(list_obj)\n    retrieved = await client.linked_list_get(address)\n\n    assert str(retrieved) == \"test data\"\n</code></pre>"},{"location":"guides/testing_guide/#rust-example","title":"Rust Example","text":"<pre><code>#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_linked_list_operations() {\n        let client = Client::new();\n\n        let mut list = LinkedList::new();\n        list.append(\"test data\");\n\n        let address = client.linked_list_put(&amp;list).unwrap();\n        let retrieved = client.linked_list_get(&amp;address).unwrap();\n\n        assert_eq!(retrieved.to_string(), \"test data\");\n    }\n}\n</code></pre>"},{"location":"guides/testing_guide/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests</li> <li>Integration Tests</li> <li>Network Tests</li> <li>EVM Integration Tests</li> </ol>"},{"location":"guides/testing_guide/#cicd-integration","title":"CI/CD Integration","text":"<ul> <li>GitHub Actions configuration</li> <li>Test automation</li> <li>Coverage reporting</li> </ul>"},{"location":"guides/testing_guide/#best-practices","title":"Best Practices","text":"<ul> <li>Test isolation</li> <li>Mock network calls</li> <li>Error scenarios</li> <li>Performance testing</li> </ul>"}]}