name: Build and Publish Python Package

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'autonomi/**'
      - '.github/workflows/python-publish.yml'

permissions:
  id-token: write
  contents: read

jobs:
  macos:
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: rustfmt
      - name: Create Python module structure
        run: |
          mkdir -p autonomi/python/autonomi
          cat > autonomi/python/autonomi/__init__.py << EOL
          from ._autonomi import *
          __version__ = "0.2.33"
          EOL
      - name: Create dist directory
        run: mkdir -p dist
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out ../dist
          sccache: 'true'
          working-directory: ./autonomi
      - name: List dist contents
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl
          if-no-files-found: error

  windows:
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
          components: rustfmt
      - name: Create Python module structure
        shell: cmd
        run: |
          mkdir autonomi\python\autonomi
          echo from ._autonomi import * > autonomi\python\autonomi\__init__.py
          echo __version__ = "0.2.33" >> autonomi\python\autonomi\__init__.py
      - name: Create dist directory
        run: mkdir dist
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out ../dist
          sccache: 'true'
          working-directory: ./autonomi
      - name: List dist contents
        run: dir dist
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl
          if-no-files-found: error

  linux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
          components: rustfmt
      - name: Install dependencies
        run: |
          python -m pip install --user cffi
          python -m pip install --user patchelf
      - name: Create Python module structure
        run: |
          mkdir -p autonomi/python/autonomi
          cat > autonomi/python/autonomi/__init__.py << EOL
          from ._autonomi import *
          __version__ = "0.2.33"
          EOL
      - name: Create dist directory
        run: mkdir -p dist
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          args: --release --out ../dist
          sccache: 'true'
          working-directory: ./autonomi
      - name: List dist contents
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.whl
          if-no-files-found: error

  sdist:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Create Python module structure
        run: |
          mkdir -p autonomi/python/autonomi
          cat > autonomi/python/autonomi/__init__.py << EOL
          from ._autonomi import *
          __version__ = "0.2.33"
          EOL
      - name: Create dist directory
        run: mkdir -p dist
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --release --out ../dist
          working-directory: ./autonomi
      - name: List contents
        run: |
          echo "Current directory:"
          pwd
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist/*.tar.gz
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, sdist]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create dist directory
        run: mkdir -p dist
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist
      - name: Display structure of downloaded files
        run: |
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true