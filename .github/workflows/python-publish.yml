name: Build and Publish Python Package

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'autonomi/**'
      - '.github/workflows/python-publish.yml'

permissions:
  id-token: write
  contents: read

jobs:
  macos:
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, aarch64]
        include:
          - target: x86_64
            target-name: x86_64-apple-darwin
          - target: aarch64
            target-name: aarch64-apple-darwin
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target-name }}
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin
      - name: Create Python module structure
        run: |
          mkdir -p autonomi/python/autonomi
          cat > autonomi/python/autonomi/__init__.py << EOL
          from ._autonomi import *
          __version__ = "0.2.33"
          EOL
      - name: Build wheels
        run: |
          cd autonomi
          maturin build --release --target ${{ matrix.target-name }} --out ../dist
          cd ..
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-macos-${{ matrix.python-version }}-${{ matrix.target }}
          path: dist/*.whl
          if-no-files-found: error

  windows:
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x64]
        include:
          - target: x64
            target-name: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin
      - name: Create Python module structure
        shell: cmd
        run: |
          mkdir autonomi\python\autonomi
          echo from ._autonomi import * > autonomi\python\autonomi\__init__.py
          echo __version__ = "0.2.33" >> autonomi\python\autonomi\__init__.py
      - name: Build wheels
        run: |
          cd autonomi
          maturin build --release --target ${{ matrix.target-name }} --out ..\dist
          cd ..
          echo "Contents of dist directory:"
          dir dist
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-windows-${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  linux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install cibuildwheel
      - name: Create Python module structure
        run: |
          mkdir -p autonomi/python/autonomi
          cat > autonomi/python/autonomi/__init__.py << EOL
          from ._autonomi import *
          __version__ = "0.2.33"
          EOL
      - name: Build wheels
        env:
          CIBW_BUILD: cp38-manylinux_x86_64 cp39-manylinux_x86_64 cp310-manylinux_x86_64 cp311-manylinux_x86_64 cp312-manylinux_x86_64
          CIBW_BEFORE_BUILD: pip install maturin
          CIBW_BUILD_VERBOSITY: 1
        run: |
          cd autonomi
          python -m cibuildwheel --output-dir ../dist
          cd ..
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-linux-${{ matrix.python-version }}
          path: dist/*.whl
          if-no-files-found: error

  sdist:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install maturin
      - name: Create Python module structure
        run: |
          mkdir -p autonomi/python/autonomi
          touch autonomi/python/autonomi/__init__.py
      - name: Build sdist
        run: |
          cd autonomi
          maturin sdist --out ../dist
          cd ..
          echo "Contents of dist directory:"
          ls -la dist/
      - name: Upload sdist
        uses: actions/upload-artifact@v3
        with:
          name: sdist
          path: dist/*.tar.gz
          if-no-files-found: error

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, sdist]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create dist directory
        run: mkdir -p dist
      - uses: actions/download-artifact@v3
        with:
          path: downloads
      - name: Consolidate artifacts
        run: |
          find downloads -type f -name "*.whl" -exec cp {} dist/ \;
          find downloads -type f -name "*.tar.gz" -exec cp {} dist/ \;
          echo "Final contents of dist directory:"
          ls -la dist/
      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true